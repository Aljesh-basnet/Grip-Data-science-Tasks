<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20212.21.0712.0907                               -->
<workbook original-version='18.1' source-build='2021.2.1 (20212.21.0712.0907)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='SampleSuperstore (SampleSuperstore)' inline='true' name='federated.11urzo80xews01109plbo1f8woe8' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='SampleSuperstore' name='excel-direct.168wqy20fo9a6o16ocqp40pmnce7'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/aljes/Downloads/Grip/Task3/SampleSuperstore.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.168wqy20fo9a6o16ocqp40pmnce7' name='SampleSuperstore' table='[SampleSuperstore$]' type='table'>
          <columns gridOrigin='A1:M9995:no:A1:M9995:0' header='yes' outcome='6'>
            <column datatype='string' name='Ship Mode' ordinal='0' />
            <column datatype='string' name='Segment' ordinal='1' />
            <column datatype='string' name='Country' ordinal='2' />
            <column datatype='string' name='City' ordinal='3' />
            <column datatype='string' name='State' ordinal='4' />
            <column datatype='integer' name='Postal Code' ordinal='5' />
            <column datatype='string' name='Region' ordinal='6' />
            <column datatype='string' name='Category' ordinal='7' />
            <column datatype='string' name='Sub-Category' ordinal='8' />
            <column datatype='real' name='Sales' ordinal='9' />
            <column datatype='integer' name='Quantity' ordinal='10' />
            <column datatype='real' name='Discount' ordinal='11' />
            <column datatype='real' name='Profit' ordinal='12' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.168wqy20fo9a6o16ocqp40pmnce7' name='SampleSuperstore' table='[SampleSuperstore$]' type='table'>
          <columns gridOrigin='A1:M9995:no:A1:M9995:0' header='yes' outcome='6'>
            <column datatype='string' name='Ship Mode' ordinal='0' />
            <column datatype='string' name='Segment' ordinal='1' />
            <column datatype='string' name='Country' ordinal='2' />
            <column datatype='string' name='City' ordinal='3' />
            <column datatype='string' name='State' ordinal='4' />
            <column datatype='integer' name='Postal Code' ordinal='5' />
            <column datatype='string' name='Region' ordinal='6' />
            <column datatype='string' name='Category' ordinal='7' />
            <column datatype='string' name='Sub-Category' ordinal='8' />
            <column datatype='real' name='Sales' ordinal='9' />
            <column datatype='integer' name='Quantity' ordinal='10' />
            <column datatype='real' name='Discount' ordinal='11' />
            <column datatype='real' name='Profit' ordinal='12' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:M9995:no:A1:M9995:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub-Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sub-Category]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Sub-Category</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Quantity</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column aggregation='Sum' datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='SampleSuperstore' datatype='table' name='[__tableau_internal_object_id__].[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]' role='measure' type='quantitative' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Sub-Category:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Fasteners&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Accessories&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bookcases&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Paper&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Furnishings&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chairs&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Appliances&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tables&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Copiers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Phones&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Storage&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Labels&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Envelopes&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Art&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Supplies&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Machines&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Binders&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Amarillo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Baltimore&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bozeman&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cary&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Clinton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cuyahoga Falls&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Durham&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Fargo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hampton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Huntington Beach&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Knoxville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lawton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Loveland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Melbourne&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Monroe&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Rochelle&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Omaha&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Pearland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portage&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rio Rancho&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Peters&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Santa Clara&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Summerville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Troy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Watertown&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;York&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aberdeen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Athens&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Billings&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Burlington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chicago&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Coppell&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Denver&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Elyria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Frisco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greenwood&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hillsboro&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jonesboro&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lakewood&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lodi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Marietta&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Minneapolis&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Muskogee&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Norwich&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palm Coast&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Plantation&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Redmond&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Round Rock&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;San Jose&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Southaven&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Thomasville&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Virginia Beach&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Wichita&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Alexandria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Aurora&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bolingbrook&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Canton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Citrus Heights&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Costa Mesa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dover&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eugene&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gastonia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hackensack&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Homestead&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kenosha&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Las Cruces&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Longview&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mason&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Missoula&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;New Albany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Odessa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pasadena&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pompano Beach&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Renton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saint Charles&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sandy Springs&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Springfield&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tinley Park&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Warwick&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Woodland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Antioch&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Baytown&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Broken Arrow&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chandler&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Colorado Springs&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Davis&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Eau Claire&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fort Collins&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Grand Prairie&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Helena&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Inglewood&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;La Quinta&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lehi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Madison&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Meridian&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Moreno Valley&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niagara Falls&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Orland Park&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Perth Amboy&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pueblo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rock Hill&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Salt Lake City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tamarac&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Twin Falls&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;West Allis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Anaheim&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bangor&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brentwood&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cedar Hill&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Clovis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dallas&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Eagan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Farmington&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Glenview&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Harlingen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Huntsville&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;La Crosse&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Layton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lowell&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Memphis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Montebello&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;New York City&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pembroke Pines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Portland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Riverside&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Petersburg&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Santa Fe&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sunnyvale&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tucson&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Waukesha&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Yucaipa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Allen&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austin&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bossier City&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Carlsbad&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Clarksville&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cottage Grove&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Draper&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Evanston&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Georgetown&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hagerstown&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hoover&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kent&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Las Vegas&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lorain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mcallen&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Missouri City&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New Bedford&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Oklahoma City&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pasco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Port Arthur&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Revere&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Cloud&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sanford&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sterling Heights&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Toledo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Woodstock&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Arvada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bethlehem&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bullhead City&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chester&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Conway&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Delray Beach&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Elkhart&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fremont&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greensboro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hickory&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jefferson City&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lakeland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Little Rock&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maple Grove&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Milford&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Murray&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;North Las Vegas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oxnard&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Plainfield&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Redding&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Roseville&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Smyrna&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Texas City&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Vancouver&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wheeling&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abilene&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Atlanta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bloomington&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Caldwell&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chico&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Coral Gables&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Des Moines&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Encinitas&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gaithersburg&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gresham&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Holland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jupiter&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lancaster&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Logan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Marion&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Miramar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Naperville&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oak Park&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Park Ridge&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Pleasant Grove&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Redondo Beach&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Royal Oak&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;San Luis Obispo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sparks&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Thornton&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Visalia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Wilmington&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Arlington&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bellevue&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Buffalo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Chattanooga&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Concord&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Decatur&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;El Cajon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Franklin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Greeley&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hesperia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jacksonville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lake Elsinore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Linden&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mansfield&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Middletown&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mount Vernon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Norman&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Overland Park&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pico Rivera&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rapid City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rome&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;San Clemente&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sioux Falls&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tempe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Vacaville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Westland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Allentown&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Avondale&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bowling Green&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Carol Stream&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cleveland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Covington&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Dublin&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Everett&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Gilbert&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Haltom City&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hot Springs&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kirkwood&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Laurel&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Los Angeles&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Medford&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mobile&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Olathe&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Passaic&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Port Orange&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Richardson&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Louis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Santa Ana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Stockton&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Torrance&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Waterbury&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Woonsocket&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Apopka&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Beaumont&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Broomfield&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Chapel Hill&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Columbia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Daytona Beach&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Edinburg&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fort Lauderdale&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Grand Rapids&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hempstead&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iowa City&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lafayette&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Leominster&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malden&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mesa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Morgan Hill&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Noblesville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Orlando&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pharr&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Quincy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rockford&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;San Angelo&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sheboygan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tampa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tyler&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;West Jordan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Apple Valley&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bedford&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Brownsville&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Charlotte&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Columbus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dearborn&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Edmond&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fort Worth&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Grapevine&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Henderson&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Irving&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Laguna Niguel&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lewiston&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Manchester&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mesquite&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Morristown&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norfolk&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ormond Beach&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Philadelphia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Raleigh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rockville&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;San Antonio&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Shelton&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Taylor&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Urbandale&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;West Palm Beach&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Arlington Heights&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bellingham&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Buffalo Grove&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chesapeake&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Conroe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Deer Park&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;El Paso&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freeport&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Green Bay&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hialeah&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jamestown&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lake Forest&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lindenhurst&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Manteca&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Midland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Murfreesboro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;North Charleston&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Owensboro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Pine Bluff&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Reading&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Romeoville&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;San Diego&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Skokie&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Texarkana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Vallejo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Westminster&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Asheville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Beverly&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Burbank&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cheyenne&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Coon Rapids&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Deltona&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fresno&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Greenville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Highland Park&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Johnson City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lakeville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Littleton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Margate&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Milwaukee&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Murrieta&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;North Miami&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Palatine&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Plano&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Redlands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Roswell&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;San Gabriel&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;South Bend&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;The Colony&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vineland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Whittier&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Andover&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bartlett&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bridgeton&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cedar Rapids&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Coachella&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Danbury&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;East Orange&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fayetteville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Goldsboro&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Harrisonburg&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Independence&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;La Mesa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;League City&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lubbock&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mentor&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Montgomery&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Newark&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Orange&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pensacola&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Providence&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rochester&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Salem&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Santa Maria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Superior&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tulsa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wausau&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Yuma&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Altoona&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bakersfield&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Boynton Beach&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Carrollton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Clifton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cranston&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dubuque&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fairfield&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gladstone&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hamilton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Houston&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kissimmee&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lawrence&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Louisville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Medina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Modesto&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Castle&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Olympia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paterson&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Port Saint Lucie&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Paul&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Santa Barbara&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Suffolk&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Trenton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Waterloo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Yonkers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Akron&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Atlantic City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Boca Raton&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Camarillo&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chula Vista&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Coral Springs&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Des Plaines&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Englewood&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Garden City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Grove City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hollywood&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Keller&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lansing&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Long Beach&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Marlborough&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mishawaka&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nashua&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Oakland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Parker&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pocatello&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Redwood City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sacramento&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;San Marcos&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Spokane&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Thousand Oaks&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Waco&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wilson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Appleton&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belleville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bryan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Charlottesville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Commerce City&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dearborn Heights&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Edmonds&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Frankfort&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Great Falls&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hendersonville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jackson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lake Charles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lincoln Park&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Manhattan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Miami&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mount Pleasant&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Normal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oswego&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Phoenix&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rancho Cucamonga&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rogers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;San Bernardino&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sierra Vista&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Temecula&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Utica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Westfield&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ann Arbor&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bayonne&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bristol&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Champaign&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;College Station&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Danville&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;East Point&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Florence&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Grand Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hattiesburg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Indianapolis&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;La Porte&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Macon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Meriden&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Moorhead&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Newport News&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Orem&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Peoria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Provo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rochester Hills&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Salinas&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Scottsdale&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tallahassee&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tuscaloosa&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Waynesboro&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albuquerque&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Auburn&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Boise&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cambridge&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cincinnati&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Corpus Christi&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Detroit&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Escondido&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Garland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gulfport&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Holyoke&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kenner&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Laredo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Longmont&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Marysville&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mission Viejo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nashville&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Oceanside&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Parma&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pomona&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Reno&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saginaw&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;San Mateo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Springdale&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tigard&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Warner Robins&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Woodbury&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Nepal&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='SampleSuperstore' id='SampleSuperstore_CF5F3306677247768494C9CA38050FE4'>
            <properties context=''>
              <relation connection='excel-direct.168wqy20fo9a6o16ocqp40pmnce7' name='SampleSuperstore' table='[SampleSuperstore$]' type='table'>
                <columns gridOrigin='A1:M9995:no:A1:M9995:0' header='yes' outcome='6'>
                  <column datatype='string' name='Ship Mode' ordinal='0' />
                  <column datatype='string' name='Segment' ordinal='1' />
                  <column datatype='string' name='Country' ordinal='2' />
                  <column datatype='string' name='City' ordinal='3' />
                  <column datatype='string' name='State' ordinal='4' />
                  <column datatype='integer' name='Postal Code' ordinal='5' />
                  <column datatype='string' name='Region' ordinal='6' />
                  <column datatype='string' name='Category' ordinal='7' />
                  <column datatype='string' name='Sub-Category' ordinal='8' />
                  <column datatype='real' name='Sales' ordinal='9' />
                  <column datatype='integer' name='Quantity' ordinal='10' />
                  <column datatype='real' name='Discount' ordinal='11' />
                  <column datatype='real' name='Profit' ordinal='12' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Furniture with less profit in all of the segments'>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='false' y-axis='true' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='false' y-axis='true' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='false' y-axis='true' />
          </pane>
        </panes>
        <rows>([federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk] + [federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk])</rows>
        <cols>([federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk] / [federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk])</cols>
      </table>
      <simple-id uuid='{160E4CD1-0E73-40D0-B0F2-04586473E23A}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
                <format attr='size' value='1' />
                <format attr='mark-color' value='#ff9d9a' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk] + [federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk])</rows>
        <cols>[federated.11urzo80xews01109plbo1f8woe8].[none:Region:nk]</cols>
      </table>
      <simple-id uuid='{2E55ADEE-F42D-4C79-BEBB-DB112A63EBA2}' />
    </worksheet>
    <worksheet name='Tables in consumer segment is lowest profit'>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk]'>
            <groupfilter function='member' level='[none:Category:nk]' member='&quot;Furniture&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' />
              <text column='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.11urzo80xews01109plbo1f8woe8].[none:Sub-Category:nk]</rows>
        <cols>[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]</cols>
      </table>
      <simple-id uuid='{6C8022AD-6D6C-4771-A078-150F733251A8}' />
    </worksheet>
    <worksheet name='Top 5 cities with less profit'>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]'>
            <groupfilter count='5' end='bottom' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:City:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]</rows>
        <cols>([federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk] / [federated.11urzo80xews01109plbo1f8woe8].[none:City:nk])</cols>
      </table>
      <simple-id uuid='{CF82BA9D-5AE4-4577-AC8D-91709111129F}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' maximized='true' name='Top 5 cities with less profit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]&#10;[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Country:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:State:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CDD29120-3458-49BC-8275-5FA6AEDB7980}' />
    </window>
    <window class='worksheet' name='Furniture with less profit in all of the segments'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]&#10;[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B9EAF657-AFE0-4BE1-948D-56E6C36B3BFC}' />
    </window>
    <window class='worksheet' name='Tables in consumer segment is lowest profit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7A9288E8-DDD0-4D2E-ABFD-F74CFCB15513}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EA2F6B5F-D038-4BA9-B280-386277145C4A}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Furniture with less profit in all of the segments' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
    </thumbnail>
    <thumbnail height='144' name='Tables in consumer segment is lowest profit' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Top 5 cities with less profit' width='192'>
      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
      8LW62QAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
