<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20212.21.0712.0907                               -->
<workbook original-version='18.1' source-build='2021.2.1 (20212.21.0712.0907)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='SampleSuperstore (SampleSuperstore)' inline='true' name='federated.11urzo80xews01109plbo1f8woe8' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='SampleSuperstore' name='excel-direct.168wqy20fo9a6o16ocqp40pmnce7'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/aljes/Downloads/Grip/Task3/SampleSuperstore.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.168wqy20fo9a6o16ocqp40pmnce7' name='SampleSuperstore' table='[SampleSuperstore$]' type='table'>
          <columns gridOrigin='A1:M9995:no:A1:M9995:0' header='yes' outcome='6'>
            <column datatype='string' name='Ship Mode' ordinal='0' />
            <column datatype='string' name='Segment' ordinal='1' />
            <column datatype='string' name='Country' ordinal='2' />
            <column datatype='string' name='City' ordinal='3' />
            <column datatype='string' name='State' ordinal='4' />
            <column datatype='integer' name='Postal Code' ordinal='5' />
            <column datatype='string' name='Region' ordinal='6' />
            <column datatype='string' name='Category' ordinal='7' />
            <column datatype='string' name='Sub-Category' ordinal='8' />
            <column datatype='real' name='Sales' ordinal='9' />
            <column datatype='integer' name='Quantity' ordinal='10' />
            <column datatype='real' name='Discount' ordinal='11' />
            <column datatype='real' name='Profit' ordinal='12' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.168wqy20fo9a6o16ocqp40pmnce7' name='SampleSuperstore' table='[SampleSuperstore$]' type='table'>
          <columns gridOrigin='A1:M9995:no:A1:M9995:0' header='yes' outcome='6'>
            <column datatype='string' name='Ship Mode' ordinal='0' />
            <column datatype='string' name='Segment' ordinal='1' />
            <column datatype='string' name='Country' ordinal='2' />
            <column datatype='string' name='City' ordinal='3' />
            <column datatype='string' name='State' ordinal='4' />
            <column datatype='integer' name='Postal Code' ordinal='5' />
            <column datatype='string' name='Region' ordinal='6' />
            <column datatype='string' name='Category' ordinal='7' />
            <column datatype='string' name='Sub-Category' ordinal='8' />
            <column datatype='real' name='Sales' ordinal='9' />
            <column datatype='integer' name='Quantity' ordinal='10' />
            <column datatype='real' name='Discount' ordinal='11' />
            <column datatype='real' name='Profit' ordinal='12' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:M9995:no:A1:M9995:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub-Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sub-Category]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Sub-Category</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Quantity</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[SampleSuperstore]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column aggregation='Sum' datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
      <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='SampleSuperstore' datatype='table' name='[__tableau_internal_object_id__].[SampleSuperstore_CF5F3306677247768494C9CA38050FE4]' role='measure' type='quantitative' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
      <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Sub-Category:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Fasteners&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Accessories&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bookcases&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Paper&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Furnishings&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chairs&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Appliances&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tables&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Copiers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Phones&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Storage&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Labels&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Envelopes&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Art&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Supplies&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Machines&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Binders&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Amarillo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Baltimore&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bozeman&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cary&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Clinton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cuyahoga Falls&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Durham&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Fargo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hampton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Huntington Beach&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Knoxville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lawton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Loveland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Melbourne&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Monroe&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Rochelle&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Omaha&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Pearland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portage&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rio Rancho&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Peters&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Santa Clara&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Summerville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Troy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Watertown&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;York&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aberdeen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Athens&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Billings&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Burlington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chicago&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Coppell&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Denver&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Elyria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Frisco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greenwood&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hillsboro&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jonesboro&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lakewood&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lodi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Marietta&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Minneapolis&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Muskogee&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Norwich&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palm Coast&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Plantation&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Redmond&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Round Rock&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;San Jose&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Southaven&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Thomasville&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Virginia Beach&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Wichita&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Alexandria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Aurora&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bolingbrook&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Canton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Citrus Heights&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Costa Mesa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dover&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eugene&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gastonia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hackensack&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Homestead&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kenosha&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Las Cruces&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Longview&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mason&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Missoula&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;New Albany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Odessa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pasadena&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pompano Beach&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Renton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saint Charles&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sandy Springs&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Springfield&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tinley Park&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Warwick&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Woodland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Antioch&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Baytown&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Broken Arrow&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chandler&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Colorado Springs&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Davis&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Eau Claire&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fort Collins&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Grand Prairie&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Helena&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Inglewood&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;La Quinta&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lehi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Madison&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Meridian&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Moreno Valley&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niagara Falls&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Orland Park&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Perth Amboy&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pueblo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rock Hill&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Salt Lake City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tamarac&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Twin Falls&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;West Allis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Anaheim&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bangor&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brentwood&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cedar Hill&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Clovis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dallas&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Eagan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Farmington&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Glenview&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Harlingen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Huntsville&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;La Crosse&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Layton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lowell&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Memphis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Montebello&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;New York City&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pembroke Pines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Portland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Riverside&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Petersburg&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Santa Fe&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sunnyvale&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tucson&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Waukesha&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Yucaipa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Allen&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austin&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bossier City&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Carlsbad&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Clarksville&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cottage Grove&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Draper&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Evanston&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Georgetown&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hagerstown&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hoover&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kent&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Las Vegas&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lorain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mcallen&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Missouri City&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New Bedford&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Oklahoma City&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pasco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Port Arthur&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Revere&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Cloud&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sanford&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sterling Heights&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Toledo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Woodstock&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Arvada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bethlehem&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bullhead City&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chester&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Conway&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Delray Beach&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Elkhart&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fremont&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greensboro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hickory&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jefferson City&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lakeland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Little Rock&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maple Grove&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Milford&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Murray&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;North Las Vegas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oxnard&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Plainfield&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Redding&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Roseville&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Smyrna&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Texas City&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Vancouver&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wheeling&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abilene&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Atlanta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bloomington&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Caldwell&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chico&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Coral Gables&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Des Moines&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Encinitas&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gaithersburg&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gresham&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Holland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jupiter&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lancaster&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Logan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Marion&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Miramar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Naperville&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oak Park&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Park Ridge&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Pleasant Grove&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Redondo Beach&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Royal Oak&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;San Luis Obispo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sparks&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Thornton&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Visalia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Wilmington&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Arlington&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bellevue&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Buffalo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Chattanooga&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Concord&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Decatur&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;El Cajon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Franklin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Greeley&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hesperia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jacksonville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lake Elsinore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Linden&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mansfield&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Middletown&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mount Vernon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Norman&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Overland Park&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pico Rivera&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rapid City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rome&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;San Clemente&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sioux Falls&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tempe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Vacaville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Westland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Allentown&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Avondale&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bowling Green&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Carol Stream&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cleveland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Covington&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Dublin&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Everett&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Gilbert&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Haltom City&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hot Springs&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kirkwood&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Laurel&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Los Angeles&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Medford&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mobile&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Olathe&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Passaic&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Port Orange&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Richardson&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Louis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Santa Ana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Stockton&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Torrance&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Waterbury&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Woonsocket&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Apopka&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Beaumont&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Broomfield&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Chapel Hill&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Columbia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Daytona Beach&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Edinburg&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fort Lauderdale&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Grand Rapids&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hempstead&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iowa City&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lafayette&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Leominster&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malden&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mesa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Morgan Hill&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Noblesville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Orlando&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pharr&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Quincy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rockford&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;San Angelo&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sheboygan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tampa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tyler&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;West Jordan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Apple Valley&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bedford&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Brownsville&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Charlotte&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Columbus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dearborn&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Edmond&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fort Worth&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Grapevine&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Henderson&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Irving&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Laguna Niguel&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lewiston&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Manchester&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mesquite&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Morristown&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norfolk&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ormond Beach&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Philadelphia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Raleigh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rockville&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;San Antonio&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Shelton&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Taylor&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Urbandale&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;West Palm Beach&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Arlington Heights&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bellingham&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Buffalo Grove&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chesapeake&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Conroe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Deer Park&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;El Paso&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freeport&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Green Bay&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hialeah&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jamestown&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lake Forest&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lindenhurst&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Manteca&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Midland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Murfreesboro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;North Charleston&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Owensboro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Pine Bluff&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Reading&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Romeoville&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;San Diego&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Skokie&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Texarkana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Vallejo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Westminster&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Asheville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Beverly&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Burbank&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cheyenne&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Coon Rapids&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Deltona&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fresno&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Greenville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Highland Park&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Johnson City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lakeville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Littleton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Margate&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Milwaukee&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Murrieta&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;North Miami&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Palatine&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Plano&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Redlands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Roswell&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;San Gabriel&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;South Bend&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;The Colony&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vineland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Whittier&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Andover&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bartlett&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bridgeton&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cedar Rapids&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Coachella&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Danbury&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;East Orange&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fayetteville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Goldsboro&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Harrisonburg&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Independence&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;La Mesa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;League City&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lubbock&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mentor&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Montgomery&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Newark&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Orange&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pensacola&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Providence&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rochester&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Salem&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Santa Maria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Superior&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tulsa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wausau&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Yuma&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Altoona&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bakersfield&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Boynton Beach&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Carrollton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Clifton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cranston&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dubuque&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fairfield&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gladstone&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hamilton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Houston&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kissimmee&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lawrence&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Louisville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Medina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Modesto&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Castle&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Olympia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paterson&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Port Saint Lucie&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Paul&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Santa Barbara&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Suffolk&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Trenton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Waterloo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Yonkers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Akron&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Atlantic City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Boca Raton&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Camarillo&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chula Vista&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Coral Springs&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Des Plaines&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Englewood&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Garden City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Grove City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hollywood&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Keller&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lansing&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Long Beach&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Marlborough&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mishawaka&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nashua&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Oakland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Parker&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pocatello&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Redwood City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sacramento&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;San Marcos&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Spokane&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Thousand Oaks&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Waco&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wilson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Appleton&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belleville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bryan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Charlottesville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Commerce City&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dearborn Heights&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Edmonds&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Frankfort&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Great Falls&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hendersonville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jackson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lake Charles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lincoln Park&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Manhattan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Miami&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mount Pleasant&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Normal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oswego&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Phoenix&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rancho Cucamonga&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rogers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;San Bernardino&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sierra Vista&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Temecula&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Utica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Westfield&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ann Arbor&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bayonne&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bristol&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Champaign&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;College Station&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Danville&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;East Point&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Florence&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Grand Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hattiesburg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Indianapolis&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;La Porte&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Macon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Meriden&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Moorhead&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Newport News&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Orem&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Peoria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Provo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rochester Hills&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Salinas&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Scottsdale&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tallahassee&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tuscaloosa&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Waynesboro&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albuquerque&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Auburn&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Boise&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cambridge&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cincinnati&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Corpus Christi&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Detroit&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Escondido&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Garland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gulfport&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Holyoke&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kenner&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Laredo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Longmont&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Marysville&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mission Viejo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nashville&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Oceanside&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Parma&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pomona&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Reno&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saginaw&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;San Mateo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Springdale&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tigard&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Warner Robins&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Woodbury&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Ship Mode:nk]&#10;[:Measure Names]' palette='nuriel_stone_10_0' type='palette'>
            <map to='#31a1b3'>
              <multibucket>
                <bucket>&quot;Second Class&quot;</bucket>
                <bucket>&quot;[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]&quot;</bucket>
              </multibucket>
            </map>
            <map to='#6fb899'>
              <multibucket>
                <bucket>&quot;Same Day&quot;</bucket>
                <bucket>&quot;[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]&quot;</bucket>
              </multibucket>
            </map>
            <map to='#8175aa'>
              <multibucket>
                <bucket>&quot;First Class&quot;</bucket>
                <bucket>&quot;[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]&quot;</bucket>
              </multibucket>
            </map>
            <map to='#ccb22b'>
              <multibucket>
                <bucket>&quot;Standard Class&quot;</bucket>
                <bucket>&quot;[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]&quot;</bucket>
              </multibucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Nepal&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='SampleSuperstore' id='SampleSuperstore_CF5F3306677247768494C9CA38050FE4'>
            <properties context=''>
              <relation connection='excel-direct.168wqy20fo9a6o16ocqp40pmnce7' name='SampleSuperstore' table='[SampleSuperstore$]' type='table'>
                <columns gridOrigin='A1:M9995:no:A1:M9995:0' header='yes' outcome='6'>
                  <column datatype='string' name='Ship Mode' ordinal='0' />
                  <column datatype='string' name='Segment' ordinal='1' />
                  <column datatype='string' name='Country' ordinal='2' />
                  <column datatype='string' name='City' ordinal='3' />
                  <column datatype='string' name='State' ordinal='4' />
                  <column datatype='integer' name='Postal Code' ordinal='5' />
                  <column datatype='string' name='Region' ordinal='6' />
                  <column datatype='string' name='Category' ordinal='7' />
                  <column datatype='string' name='Sub-Category' ordinal='8' />
                  <column datatype='real' name='Sales' ordinal='9' />
                  <column datatype='integer' name='Quantity' ordinal='10' />
                  <column datatype='real' name='Discount' ordinal='11' />
                  <column datatype='real' name='Profit' ordinal='12' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Furniture with less profit in all of the segments'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>Analysis of profit with category according to segment. Furniture is in loss in all of the segements</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='false' y-axis='true' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='false' y-axis='true' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='false' y-axis='true' />
          </pane>
        </panes>
        <rows>([federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk] + [federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk])</rows>
        <cols>([federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk] / [federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk])</cols>
      </table>
      <simple-id uuid='{160E4CD1-0E73-40D0-B0F2-04586473E23A}' />
    </worksheet>
    <worksheet name='Region west with highest sales and profit'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>Analysis of profit and sales with Region. Region west has the highest sales and profit</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='linear' />
                <format attr='size' value='1' />
                <format attr='mark-color' value='#ff9d9a' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk] + [federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk])</rows>
        <cols>[federated.11urzo80xews01109plbo1f8woe8].[none:Region:nk]</cols>
      </table>
      <simple-id uuid='{2E55ADEE-F42D-4C79-BEBB-DB112A63EBA2}' />
    </worksheet>
    <worksheet name='Standard class with highest profit and sales'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>Analysis of profit with ship mode. Standard class as a ship mode has the highest profit and sales</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' />
              <text column='[federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{08E3BB4F-C42A-4282-ACC7-BA2DE1ECC817}' />
    </worksheet>
    <worksheet name='Tables in consumer segment has lowest profit'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>Analysis of profit with sub-category according to segment. Tables in consumer segment has highest loss</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk]'>
            <groupfilter function='member' level='[none:Category:nk]' member='&quot;Furniture&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' />
              <text column='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.11urzo80xews01109plbo1f8woe8].[none:Sub-Category:nk]</rows>
        <cols>[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]</cols>
      </table>
      <simple-id uuid='{6C8022AD-6D6C-4771-A078-150F733251A8}' />
    </worksheet>
    <worksheet name='Top 5 cities with less profit'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>Top 5 cities with less profit. Houston has the highest loss in consumer segment</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]'>
            <groupfilter count='5' end='bottom' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:City:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]</rows>
        <cols>([federated.11urzo80xews01109plbo1f8woe8].[none:City:nk] / [federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk])</cols>
      </table>
      <simple-id uuid='{CF82BA9D-5AE4-4577-AC8D-91709111129F}' />
    </worksheet>
    <worksheet name='Top five cities with less profit according to ship modes'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>Top five cities with less profit according to ship modes. Standard class as a ship mode had the highest loss</run>
            <run>Æ&#10;&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SampleSuperstore (SampleSuperstore)' name='federated.11urzo80xews01109plbo1f8woe8' />
          </datasources>
          <datasource-dependencies datasource='federated.11urzo80xews01109plbo1f8woe8'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]'>
            <groupfilter count='5' end='bottom' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:City:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' field-type='quantitative' max='3167.1334495958945' min='-12917.805570367971' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk]' />
              <lod column='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' />
              <color column='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]</rows>
        <cols>([federated.11urzo80xews01109plbo1f8woe8].[none:City:nk] / [federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk])</cols>
      </table>
      <simple-id uuid='{15685D85-5738-4BFA-B530-89F44489EF85}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='38' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='35' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
              <zone h='98000' id='32' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone h='98000' id='29' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                  <zone h='98000' id='26' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                    <zone h='98000' id='23' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                      <zone h='98000' id='20' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                        <zone h='98000' id='18' type-v2='layout-basic' w='98400' x='800' y='1000'>
                          <zone h='98000' id='16' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                            <zone h='98000' id='13' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                              <zone h='98000' id='10' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                                <zone h='98000' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                                  <zone h='98000' id='5' type-v2='layout-basic' w='98400' x='800' y='1000'>
                                    <zone h='32666' id='3' name='Top 5 cities with less profit' w='49200' x='800' y='1000'>
                                      <zone-style>
                                        <format attr='border-color' value='#000000' />
                                        <format attr='border-style' value='none' />
                                        <format attr='border-width' value='0' />
                                        <format attr='margin' value='4' />
                                      </zone-style>
                                    </zone>
                                    <zone h='32666' id='8' name='Furniture with less profit in all of the segments' w='49200' x='50000' y='1000'>
                                      <zone-style>
                                        <format attr='border-color' value='#000000' />
                                        <format attr='border-style' value='none' />
                                        <format attr='border-width' value='0' />
                                        <format attr='margin' value='4' />
                                      </zone-style>
                                    </zone>
                                    <zone h='32668' id='14' name='Region west with highest sales and profit' w='49204' x='49996' y='66332'>
                                      <zone-style>
                                        <format attr='border-color' value='#000000' />
                                        <format attr='border-style' value='none' />
                                        <format attr='border-width' value='0' />
                                        <format attr='margin' value='4' />
                                      </zone-style>
                                    </zone>
                                    <zone h='32668' id='24' name='Top five cities with less profit according to ship modes' w='49196' x='800' y='66332'>
                                      <zone-style>
                                        <format attr='border-color' value='#000000' />
                                        <format attr='border-style' value='none' />
                                        <format attr='border-width' value='0' />
                                        <format attr='margin' value='4' />
                                      </zone-style>
                                    </zone>
                                    <zone h='32666' id='33' name='Tables in consumer segment has lowest profit' w='49200' x='800' y='33666'>
                                      <zone-style>
                                        <format attr='border-color' value='#000000' />
                                        <format attr='border-style' value='none' />
                                        <format attr='border-width' value='0' />
                                        <format attr='margin' value='4' />
                                      </zone-style>
                                    </zone>
                                    <zone h='32666' id='36' name='Standard class with highest profit and sales' w='49200' x='50000' y='33666'>
                                      <zone-style>
                                        <format attr='border-color' value='#000000' />
                                        <format attr='border-style' value='none' />
                                        <format attr='border-width' value='0' />
                                        <format attr='margin' value='4' />
                                      </zone-style>
                                    </zone>
                                  </zone>
                                </zone>
                              </zone>
                            </zone>
                          </zone>
                        </zone>
                      </zone>
                    </zone>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1600' minheight='1600' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='46' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='45' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='253' h='32666' id='3' is-fixed='true' name='Top 5 cities with less profit' w='49200' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='253' h='32666' id='8' is-fixed='true' name='Furniture with less profit in all of the segments' w='49200' x='50000' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='254' h='32666' id='33' is-fixed='true' name='Tables in consumer segment has lowest profit' w='49200' x='800' y='33666'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='254' h='32666' id='36' is-fixed='true' name='Standard class with highest profit and sales' w='49200' x='50000' y='33666'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='253' h='32668' id='24' is-fixed='true' name='Top five cities with less profit according to ship modes' w='49196' x='800' y='66332'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='253' h='32668' id='14' is-fixed='true' name='Region west with highest sales and profit' w='49204' x='49996' y='66332'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{BBC1B7EA-C2DA-4C1B-88B0-4E87F519DFA9}' />
    </dashboard>
  </dashboards>
  <windows film-mode='true' source-height='30'>
    <window class='worksheet' name='Top 5 cities with less profit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]&#10;[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Country:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:State:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CDD29120-3458-49BC-8275-5FA6AEDB7980}' />
    </window>
    <window class='worksheet' name='Furniture with less profit in all of the segments'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]&#10;[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B9EAF657-AFE0-4BE1-948D-56E6C36B3BFC}' />
    </window>
    <window class='worksheet' name='Tables in consumer segment has lowest profit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Category:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7A9288E8-DDD0-4D2E-ABFD-F74CFCB15513}' />
    </window>
    <window class='worksheet' name='Region west with highest sales and profit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EA2F6B5F-D038-4BA9-B280-386277145C4A}' />
    </window>
    <window class='worksheet' name='Standard class with highest profit and sales'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk]</field>
                  <field>[federated.11urzo80xews01109plbo1f8woe8].[sum:Profit:qk]</field>
                  <field>[federated.11urzo80xews01109plbo1f8woe8].[sum:Sales:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Standard Class&quot;</value>
                <value>164088.78749999986</value>
                <value>1358215.7429999856</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5E018FEB-A3EA-47B6-B09C-290365A0F724}' />
    </window>
    <window class='worksheet' name='Top five cities with less profit according to ship modes'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk]&#10;[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Segment:nk]</field>
            <field>[federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2B58BFB2-F372-41CC-88CC-79AB0267F6D1}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1' tab-color='#4f779a'>
      <viewpoints>
        <viewpoint name='Furniture with less profit in all of the segments'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Region west with highest sales and profit'>
          <zoom type='entire-view' />
          <highlight field='[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Standard class with highest profit and sales'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Tables in consumer segment has lowest profit'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Top 5 cities with less profit'>
          <zoom type='entire-view' />
          <highlight field='[federated.11urzo80xews01109plbo1f8woe8].[none:City:nk]&#10;[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Top five cities with less profit according to ship modes'>
          <zoom type='entire-view' />
          <highlight field='[federated.11urzo80xews01109plbo1f8woe8].[none:Ship Mode:nk]&#10;[federated.11urzo80xews01109plbo1f8woe8].[:Measure Names]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='36' />
      <simple-id uuid='{CF13CFD3-5040-41C6-9679-928035A7FDB3}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Furniture with less profit in all of the segments' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Region west with highest sales and profit' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Standard class with highest profit and sales' width='192'>
      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
    </thumbnail>
    <thumbnail height='144' name='Tables in consumer segment has lowest profit' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Top 5 cities with less profit' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Top five cities with less profit according to ship modes' width='192'>
      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
      YII=
    </thumbnail>
  </thumbnails>
</workbook>
